/**
 * Modules in this bundle
 * @license
 *
 * sphere-to-plane:
 *
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
        }
        return n[o].exports
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s
})({
    1: [function(require, module, exports) {
        'use strict';

        var _sphere_plane_object = require('./modules/sphere_plane_object.js');

        var _sphere_plane_object2 = _interopRequireDefault(_sphere_plane_object);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        var canvas = document.getElementById('canvas-webgl');
        var renderer = new THREE.WebGLRenderer({
            antialias: true,
            canvas: canvas,
            alpha: true
        });
        var scene = new THREE.Scene();
        var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);
        var clock = new THREE.Clock();

        var sp_obj = new _sphere_plane_object2.default();

        var resizeWindow = function resizeWindow() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        };
        var setEvent = function setEvent() {
            $(window).on('resize', function() {
                resizeWindow();
            });
        };
        var initDatGui = function initDatGui() {
            var gui = new dat.GUI();
            var controller = {
                radius: gui.add(sp_obj, 'radius', 0, 1000),
                noise_a: gui.add(sp_obj, 'noise_a', 0, 500),
                noise_x: gui.add(sp_obj, 'noise_x', -20, 20),
                noise_y: gui.add(sp_obj, 'noise_y', -20, 20),
                noise_z: gui.add(sp_obj, 'noise_z', -20, 20),
                plane_noise_a: gui.add(sp_obj, 'plane_noise_a', 0, 100),
                plane_noise_y: gui.add(sp_obj, 'plane_noise_y', -10, 10),
                plane_noise_z: gui.add(sp_obj, 'plane_noise_z', -10, 10),
                time: gui.add(sp_obj, 'time', 0, 10),
                plane: gui.add(sp_obj, 'plane'),
            };
            controller.radius.onChange(function(value) {
                sp_obj.mesh.material.uniforms.radius.value = value;
            });
            controller.noise_a.onChange(function(value) {
                sp_obj.mesh.material.uniforms.noise_a.value = value;
            });
            controller.noise_x.onChange(function(value) {
                sp_obj.mesh.material.uniforms.noise_x.value = value;
            });
            controller.noise_y.onChange(function(value) {
                sp_obj.mesh.material.uniforms.noise_y.value = value;
            });
            controller.noise_z.onChange(function(value) {
                sp_obj.mesh.material.uniforms.noise_z.value = value;
            });
            controller.plane_noise_a.onChange(function(value) {
                sp_obj.mesh.material.uniforms.plane_noise_a.value = value;
            });
            controller.plane_noise_y.onChange(function(value) {
                sp_obj.mesh.material.uniforms.plane_noise_y.value = value;
            });
            controller.plane_noise_z.onChange(function(value) {
                sp_obj.mesh.material.uniforms.plane_noise_z.value = value;
            });
        };
        var render = function render() {
            sp_obj.render(clock.getDelta());
            renderer.render(scene, camera);
        };
        var renderLoop = function renderLoop() {
            render();
            requestAnimationFrame(renderLoop);
        };

        var init = function init() {
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(0xffffff, 0.0);
            camera.position.set(2000, 0, 0);
            camera.lookAt(new THREE.Vector3());

            scene.add(sp_obj.mesh);

            setEvent();
            initDatGui();
            resizeWindow();
            renderLoop();
        };
        init();

    }, {
        "./modules/sphere_plane_object.js": 2
    }],
    2: [function(require, module, exports) {
        'use strict';

        Object.defineProperty(exports, "__esModule", {
            value: true
        });

        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }



        var SpherePlaneObject = function() {
            function SpherePlaneObject() {
                _classCallCheck(this, SpherePlaneObject);

                this.radius = 250;
                this.noise_a = 20;
                this.noise_x = 5;
                this.noise_y = 5;
                this.noise_z = 5;
                this.plane_noise_a = 30;
                this.plane_noise_z = 1;
                this.plane_noise_y = 3;
                this.plane = false;
                this.texture = false;
                this.time = 1;
                this.uniforms = null;
                this.mesh = this.createMesh();
            }

            _createClass(SpherePlaneObject, [{
                key: 'createMesh',
                value: function createMesh() {
                    var plane_geometry = new THREE.PlaneBufferGeometry(4, 4, 256, 256);
                    var geometry = new THREE.SphereBufferGeometry(1, 256, 256);
                    geometry.addAttribute('position2', plane_geometry.attributes.position);
                    this.uniforms = {
                        time: {
                            type: 'f',
                            value: 0
                        },
                        ease_time: {
                            type: 'f',
                            value: 0
                        },
                        ease_time_max: {
                            type: 'f',
                            value: 1
                        },
                        radius: {
                            type: 'f',
                            value: this.radius
                        },
                        noise_a: {
                            type: 'f',
                            value: this.noise_a
                        },
                        noise_i: {
                            type: 'f',
                            value: this.noise_i
                        },
                        noise_x: {
                            type: 'f',
                            value: this.noise_x
                        },
                        noise_y: {
                            type: 'f',
                            value: this.noise_y
                        },
                        noise_z: {
                            type: 'f',
                            value: this.noise_z
                        },
                        plane_noise_a: {
                            type: 'f',
                            value: this.plane_noise_a
                        },
                        plane_noise_z: {
                            type: 'f',
                            value: this.plane_noise_z
                        },
                        plane_noise_y: {
                            type: 'f',
                            value: this.plane_noise_y
                        },
                        texture: {
                            type: 't',
                            value: new THREE.TextureLoader().load('https://ykob.github.io/sphere-to-plane/img/texture.png')
                        },
                        valid_tex: {
                            type: 'f',
                            value: 0
                        }
                    };
                    return new THREE.Mesh(geometry, new THREE.ShaderMaterial({
                        uniforms: this.uniforms,
                        vertexShader: "#define GLSLIFY 1\nattribute vec3 position2;\n\nuniform float time;\nuniform float ease_time;\nuniform float ease_time_max;\nuniform float radius;\nuniform float noise_a;\nuniform float noise_x;\nuniform float noise_y;\nuniform float noise_z;\nuniform float plane_noise_a;\nuniform float plane_noise_z;\nuniform float plane_noise_y;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\nvarying mat4 vInvertMatrix;\n\nfloat inverse(float m) {\n  return 1.0 / m;\n}\n\nmat2 inverse(mat2 m) {\n  return mat2(m[1][1],-m[0][1],\n             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}\n\n//\n// GLSL textureless classic 3D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nfloat circularInOut(float t) {\n  return t < 0.5\n    ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))\n    : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\n}\n\nmat4 rotateMatrixX(float radian) {\n  return mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, cos(radian), -sin(radian), 0.0,\n    0.0, sin(radian), cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixY(float radian) {\n  return mat4(\n    cos(radian), 0.0, sin(radian), 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    -sin(radian), 0.0, cos(radian), 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrixZ(float radian) {\n  return mat4(\n    cos(radian), -sin(radian), 0.0, 0.0,\n    sin(radian), cos(radian), 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nmat4 rotateMatrix(float radian_x, float radian_y, float radian_z) {\n  return rotateMatrixX(radian_x) * rotateMatrixY(radian_y) * rotateMatrixZ(radian_z);\n}\n\nmat4 scaleMatrix(vec3 scale) {\n  return mat4(\n    scale.x, 0.0, 0.0, 0.0,\n    0.0, scale.y, 0.0, 0.0,\n    0.0, 0.0, scale.z, 0.0,\n    0.0, 0.0, 0.0, 1.0\n  );\n}\n\nvoid main(void) {\n  float step = circularInOut(clamp(ease_time, 0.0, ease_time_max) / ease_time_max);\n  vec3 plane_position = (rotateMatrix(0.0, radians(-90.0), 0.0) * vec4(position2, 1.0)).xyz;\n  vec3 ease_position = position * (1.0 - step) + plane_position * step;\n  float noise = cnoise(\n      vec3(\n        ease_position.x * noise_x + time,\n        ease_position.y * noise_y + time,\n        ease_position.z * noise_z + time\n      )\n    );\n  float noise2 = cnoise(\n      vec3(\n        ease_position.x + time,\n        ease_position.y * plane_noise_y + time,\n        ease_position.z * plane_noise_z + time\n      )\n    );\n  mat4 scale_matrix = scaleMatrix(vec3(radius));\n  vec4 scale_position = scale_matrix * vec4(ease_position, 1.0);\n  vec4 noise_position = vec4(scale_position.xyz + vec3(\n    position.x * noise * noise_a * (1.0 - step) + (plane_position.x + plane_noise_a * 2.0) * noise2 * step,\n    position.y * noise * noise_a * (1.0 - step),\n    position.z * noise * noise_a * (1.0 - step)\n  ), 1.0);\n  vPosition = noise_position;\n  vUv = uv;\n  vInvertMatrix = inverse(scale_matrix * modelMatrix);\n  gl_Position = projectionMatrix * modelViewMatrix * noise_position;\n}\n",
                        fragmentShader: "#define GLSLIFY 1\nuniform float radius;\nuniform sampler2D texture;\nuniform float valid_tex;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\nvarying mat4 vInvertMatrix;\n\nvoid main(void) {\n  vec3 normal = normalize(cross(dFdx(vPosition.xyz), dFdy(vPosition.xyz)));\n  // vec3 normal = normalize(vPosition.xyz);\n  vec3 inv_light = normalize(vInvertMatrix * vec4(vec3(0.7), 0.0)).xyz;\n  float diff = (dot(normal, inv_light) + 1.0) / 2.0;\n  vec3 light = vec3(0.2) * diff;\n  vec4 color = vec4(0.6, 0.7, 0.68, 1.0);\n  vec4 tex_color = texture2D(texture, vUv);\n  gl_FragColor = (color + vec4(light, 1.0)) * (1.0 - valid_tex) + vec4(tex_color.rgb + light, tex_color.a) * valid_tex;\n}\n",
                        transparent: true,
                        shading: THREE.FlatShading,
                        side: THREE.DoubleSide
                    }));
                }
            }, {
                key: 'render',
                value: function render(time) {
                    this.uniforms.time.value += time * this.time;
                    if (this.plane) {
                        if (this.uniforms.ease_time.value < this.uniforms.ease_time_max.value) {
                            this.uniforms.ease_time.value += time;
                        } else {
                            this.uniforms.ease_time.value = this.uniforms.ease_time_max.value;
                        }
                    } else {
                        if (this.uniforms.ease_time.value > 0) {
                            this.uniforms.ease_time.value -= time;
                        } else {
                            this.uniforms.ease_time.value = 0;
                        }
                    }
                }
            }]);

            return SpherePlaneObject;
        }();

        exports.default = SpherePlaneObject;

    }, {}]
}, {}, [1]);